cf_properties: |

  # Configure your Cloud Controller's filesystem
  ".properties.system_blobstore":
    value: internal

  # Loggregator Port
  # Default is 443. Enter a new value to override the default, for instance
  # if port 443 on your load balancer is used for other traffic.
  ".properties.logger_endpoint_port":
    value: ''
  ".properties.container_networking_network_cidr":
    value: 10.255.0.0/16

  # Type "X" to acknowledge that you understand this message
  ".properties.security_acknowledgement":
    value: CHANGEME

  # System Domain
  # This domain is for system-level PCF components, such as the API, UAA,
  # or Apps Manager. You must set up a wildcard DNS record for this domain
  # that points to your entry point load balancer or HAProxy as configured
  # on the Networking tab.
  ".cloud_controller.system_domain":
    value: CHANGEME

  # Apps Domain
  # This domain is the default domain that applications will use for their
  # hostnames. This domain also requires a wildcard DNS record. Use the
  # Cloud Foundry command line interface (cf CLI) to add or delete
  # subdomains assigned to individual apps.
  ".cloud_controller.apps_domain":
    value: CHANGEME

  # Default App Memory Quota per Org (MB)
  # Default memory limit for all apps in an org. This default only applies
  # for the first installation of Application Service. After initial
  # installation, use the CLI to manage quotas.
  ".cloud_controller.default_quota_memory_limit_mb":
    value: '10240'

  # Default Service Instances Quota per Org
  # Default maximum number of service instances in an org. This default
  # only applies for the first installation of Application Service, otherwise
  # use the CLI to manage quotas
  ".cloud_controller.default_quota_max_number_services":
    value: '1000'

  # Allow SSH access to app containers
  # If you are using a load balancer instead of HAProxy, to enable SSH
  # traffic ensure that your load balancer has port 2222 open. PCF users can
  # give SSH access to an app only if an admin assigns them a Space Developer
  # role in the space that the app runs in. Admins can grant this role in
  # Apps Manager or via the cf CLI.
  ".cloud_controller.allow_app_ssh_access":
    value: 'true'

  # HAProxy IPs
  # If you are using HAProxy, enter its IP address(es). The addresses must
  # be within your subnet CIDR block. Point your DNS to this IP address
  # unless you are using your own load balancer.
  ".ha_proxy.static_ips":
    value: ''

  # Disable SSL certificate verification for this environment
  # You can disable SSL verification if you are using your own self-signed
  # certificates that are not from a trusted CA.
  ".ha_proxy.skip_cert_verify":
    value: 'true'

  # Router IPs
  # If you are deploying onto an infrastructure that does not support
  # automated assignment of routers to load balancers (vSphere), or you are
  # intending to manually configure your load balancer with the IP
  # addresses of the routers, you should enter static IP addresses here
  # that will be used by the routers. On infrastructures where automated
  # load balancer assignment is supported (AWS, GCP, Azure), this field can
  # be left blank and the "Load Balancers" field on the "Resource Config"
  # tab can be filled out with the correct load balancer assignment.
  ".router.static_ips":
    value: 192.168.20.100,192.168.20.101,192.168.20.102,192.168.20.103,192.168.20.104,192.168.20.105,192.168.20.106,192.168.20.107,192.168.20.108,192.168.20.109

  # Disable insecure cookies on the Router
  # If checked, this turns on the secure flag for cookies generated by
  # router.
  ".router.disable_insecure_cookies":
    value: 'false'

  # Router Timeout to Backends (in seconds)
  # Timeout for connections from Router (and HAProxy, if you use it) to
  # applications and system components. Increase this to accommodate larger
  # uploads over connections with high latency.
  ".router.request_timeout_in_seconds":
    value: '900'

  # E-mail address (required)
  # The MySQL service will send alerts when the cluster experiences a
  # replication issue or a node is not allowed to auto-rejoin the cluster.
  ".mysql_monitor.recipient_email":
    value: CHANGEME

  # TCP Router IPs
  # Enter the IP address(es) you would like to designate for the TCP
  # Routers, and point your load balancer to these addresses. If deploying
  # to AWS with an ELB, do not enter IP addresses here. Instead, in the
  # Resource Config section, add your ELB by name to the ELB Name column
  # for TCP Router.
  ".tcp_router.static_ips":
    value: 192.168.20.110,192.168.20.111,192.168.20.112,192.168.20.113,192.168.20.114,192.168.20.115,192.168.20.116,192.168.20.117,192.168.20.118,192.168.20.119
  ".push-apps-manager.company_name":
    value: ''

  # SSH Proxy IPs
  # Enter static IPs for the Diego Brain(s), which will accept requests to
  # SSH into application containers on port 2222, and register a load
  # balancer with these IPs. If deploying PCF to AWS with an ELB, do not
  # enter IP addresses here. Instead, add the name of your ELB in the
  # Resource Config section, in the ELB Name column for Diego Brain.
  ".diego_brain.static_ips":
    value: 192.168.20.120,192.168.20.121,192.168.20.122

  # Choose whether to enable route services. Route services enable you to
  # proxy requests to your app over TLS to arbitrary URLs before hitting
  # your app.
  ".properties.route_services":
    value: disable

  # Enable TCP requests to your apps via specific ports on the TCP router.
  # You will want to configure a load balancer to forward these TCP
  # requests to the TCP routers. If you do not have a load balancer, then
  # you can also send traffic directly to the TCP router.
  ".properties.tcp_routing":
    value: enable
  ".properties.tcp_routing.enable.reservable_ports":
    value: '2323'
  ".properties.networking_poe_ssl_cert":
    value:
      cert_pem: |-
        -----BEGIN EXAMPLE CERTIFICATE-----
        ...
        -----END EXAMPLE CERTIFICATE-----
      private_key_pem: |-
        -----BEGIN EXAMPLE RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----

  # HAProxy forwards requests to Router over TLS. When enabled, HAProxy
  # will forward all requests to the Router over TLS. HAProxy will use
  # the CA provided  to verify the certificates provided by the Router.
  ".properties.haproxy_forward_tls":
    value: enable
  ".properties.haproxy_forward_tls.enable.backend_ca":
    value: |-
      -----BEGIN EXAMPLE CERTIFICATE-----
      ...
      -----END EXAMPLE CERTIFICATE-----

  # Disable HTTP on HAProxy and Gorouter
  # When checked, HAProxy and Gorouter will not listen on port 80.
  ".properties.routing_disable_http":
    value: 'false'

  # TLS Cipher Suites for Router
  # An ordered, colon-delimited list of Golang supported TLS cipher suites
  # in OpenSSL format. The recommended setting is
  # "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384".
  # Operators should verify that these are supported by any clients or
  # downstream components that will initiate TLS handshakes with the Router.
  ".properties.gorouter_ssl_ciphers":
    value: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384

  # TLS Cipher Suites for HAProxy
  # An ordered, colon-delimited list of TLS cipher suites in OpenSSL format.
  # The recommended setting is
  # "DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384".
  # Operators should verify that these are supported by any clients or downstream
  # components that will initiate TLS handshakes with the HAProxy.
  ".properties.haproxy_ssl_ciphers":
    value: DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384

  # Configure your UAA user account store with either internal or external
  # authentication mechanisms
  ".properties.uaa":
    value: internal

  # SAML Service Provider Credentials
  # Private key and certificate for the service provider.
  ".uaa.service_provider_key_credentials":
    value:
      cert_pem: |-
        -----BEGIN EXAMPLE CERTIFICATE-----
        ...
        -----END EXAMPLE CERTIFICATE-----
      private_key_pem: |-
        -----BEGIN EXAMPLE RSA PRIVATE KEY-----
        ...
        -----END EXAMPLE RSA PRIVATE KEY-----
